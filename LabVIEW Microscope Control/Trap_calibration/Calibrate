{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[WinError 3] The system cannot find the path specified: 'Google Drive (shg512@york.ac.uk)\\\\Code\\\\python\\\\Research\\\\Trap calibration'\n",
      "C:\\Users\\Seb\\Google Drive (shg512@york.ac.uk)\\Code\\python\\Research\\Trap calibration\n"
     ]
    }
   ],
   "source": [
    "cd Google Drive (shg512@york.ac.uk)\\Code\\python\\Research\\Trap calibration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "from os import getcwd, listdir, makedirs, path\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "from lmfit import Minimizer, Parameters\n",
    "from numpy.fft import rfft, rfftfreq\n",
    "from pandas import read_csv\n",
    "from scipy.signal import periodogram\n",
    "from brownian import k_brown\n",
    "from functions import anti_aliased_lorentzian, lorentzian\n",
    "from settings import D, Fs, axl_correction, gamma, lat_correction\n",
    "\n",
    "sns.set(color_codes=True)\n",
    "use_moving_average = False\n",
    "anti_aliasing = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def moving_average(data, window=10):\n",
    "    extended_data = np.hstack([[data[0]] * (window - 1), data])\n",
    "    weightings = np.repeat(1.0, window) / window\n",
    "    return np.convolve(extended_data, weightings)[window-1:-(window-1)]\n",
    "\n",
    "def calibrate(x, Fs, filename, plot_dir, cutoffs=None, antialiasing=None,\n",
    "              axis='z'):\n",
    "    plt.clf()\n",
    "    plt.xscale('log')\n",
    "    plt.yscale('log')\n",
    "    # Calculate the 1D Fourier Transform\n",
    "    # BUT THIS is just the +ve part of the two-sided\n",
    "    # f, p = rfftfreq(x.size, d=1./Fs), np.absolute(rfft(x))**2\n",
    "    f, p = periodogram(x, fs=Fs, return_onesided=True, scaling='density')\n",
    "    plt.scatter(f, p, s=1)\n",
    "\n",
    "    # Cutoff low frequencies\n",
    "    if not cutoffs:\n",
    "        cutoffs = [150, 10000]  # Nyquist limit\n",
    "    cutoff_condition = (f > cutoffs[0]) & (f < cutoffs[1])\n",
    "    p = p[cutoff_condition]\n",
    "    f = f[cutoff_condition]\n",
    "\n",
    "    # Set initial parameters for fitting\n",
    "    fc = 1000 if axis != \"z\" else 100\n",
    "    A = 1e3  # if axis != \"z\" else 500\n",
    "\n",
    "    # if axis == \"z\":\n",
    "    #     p, f = moving_average(p), moving_average(f)\n",
    "    #     plt.plot(f, p, c='g')\n",
    "\n",
    "    params = Parameters()\n",
    "    params.add('Dv', value=A)\n",
    "    params.add('fc', value=fc, min=-0, max=Fs/2)\n",
    "    if anti_aliasing:\n",
    "        params.add('fNyq', value=Fs/2)\n",
    "        minner = Minimizer(anti_aliased_lorentzian, params, fcn_args=(f, p))\n",
    "    else:\n",
    "        minner = Minimizer(lorentzian, params, fcn_args=(f, p))\n",
    "    result = minner.minimize()\n",
    "    p_fit = p + result.residual\n",
    "\n",
    "    plt.plot(f, p_fit, c='maroon')\n",
    "\n",
    "    Dv, fc = result.params['Dv'].value, result.params['fc'].value\n",
    "    Dv_err, fc_err = result.params['Dv'].stderr, result.params['fc'].stderr\n",
    "    b = np.sqrt(D/Dv)  # in m/V\n",
    "    # Taking derivative to get error (df^2 = (df/dx dx)^2 + ...)\n",
    "    if Dv_err:\n",
    "        bErr = np.sqrt(D / (4 * Dv**3)) * Dv_err\n",
    "    else:\n",
    "        bErr = 0\n",
    "    # k = 2πγfc\n",
    "    k = 2*np.pi*gamma*fc*1e6  # in pN/μm\n",
    "    if fc_err:\n",
    "        kErr = 2*np.pi*gamma*fc_err*1e6  # in pN/μm\n",
    "    else:\n",
    "        kErr = 0\n",
    "\n",
    "    b, bErr = b * 1e6, bErr * 1e6  # in μm/V\n",
    "    h_correction = axl_correction if axis == 'z'else lat_correction\n",
    "    k, kErr = k/h_correction, kErr/h_correction\n",
    "\n",
    "    plt.xlabel('f (Hz)')\n",
    "    plt.ylabel('P.S.D. (V²/Hz)')\n",
    "    plt.xlim(left=10, right=1.1*cutoffs[1])\n",
    "    plt.ylim(bottom=0.9*min(p), top=1.1*max(p))\n",
    "    plt.suptitle(f'k={k:4.2f} pN/μm, b= {b:4.2f} μm/V')\n",
    "    save_file = path.join(getcwd(), 'plots')\n",
    "    makedirs(save_file, exist_ok=True)\n",
    "    # switch back to path.basename etc later\n",
    "    save_file = path.join(plot_dir, path.splitext(filename)[0] + f'_{axis}')\n",
    "    plt.savefig(save_file, bbox_inches='tight')\n",
    "    # Plot and save result to file\n",
    "    # plt.loglog(f, lorentzian(f, *popt))\n",
    "\n",
    "    return k, kErr, b, bErr\n",
    "\n",
    "def giveResult(data):\n",
    "    string = str(np.average(data))[0:5] + ' +/- ' + \\\n",
    "             str(np.std(data)/np.sqrt(len(data)))[0:5]\n",
    "    print(string)\n",
    "    \n",
    "def save_calibration_file(x, y, z):\n",
    "    from settings import r, h, Fs\n",
    "    global anti_aliasing\n",
    "    data = {\n",
    "        'k': {\n",
    "            'x': np.average(x.k),\n",
    "            'y': np.average(y.k),\n",
    "            'z': np.average(z.k),\n",
    "            'x_error': np.std(x.k),\n",
    "            'y_error': np.std(y.k),\n",
    "            'z_error': np.std(z.k),\n",
    "            #'x_error_fit': np.average(x.k_err[x.k_err != 0]),\n",
    "            #'y_error_fit': np.average(y.k_err[y.k_err != 0]),\n",
    "            #'z_error_fit': np.average(z.k_err[z.k_err != 0]),\n",
    "            },\n",
    "        'b': {\n",
    "            'x': np.average(x.b),\n",
    "            'y': np.average(y.b),\n",
    "            'z': np.average(z.b),\n",
    "            'x_error': np.std(x.b),\n",
    "            'y_error': np.std(y.b),\n",
    "            'z_error': np.std(z.b),\n",
    "            #'x_error_fit': np.average(x.b_err[x.b_err != 0]),\n",
    "            #'y_error_fit': np.average(y.b_err[y.b_err != 0]),\n",
    "            #'z_error_fit': np.average(z.b_err[z.b_err != 0])\n",
    "            },\n",
    "        'K': {\n",
    "            'x': np.average(x.K),\n",
    "            'y': np.average(y.K),\n",
    "            'z': np.average(z.K),\n",
    "            'x_error': np.std(x.K),\n",
    "            'y_error': np.std(y.K),\n",
    "            'z_error': np.std(z.K)\n",
    "            },\n",
    "        'settings': {\n",
    "            'anti-aliasing': anti_aliasing,\n",
    "            'bead radius': r,\n",
    "            'bead height': h,\n",
    "            'Fs': Fs\n",
    "            }\n",
    "    }\n",
    "\n",
    "    with open('calibration.json', 'w') as f:\n",
    "        json.dump(data, f, indent=4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "class ResultContainer():\n",
    "    def __init__(self):\n",
    "        self.k = []\n",
    "        self.k_err = []\n",
    "        self.b = []\n",
    "        self.b_err = []\n",
    "        self.K = []\n",
    "        self.K_err = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data_dir = path.join(getcwd(), 'data')\n",
    "plot_dir = path.join(getcwd(), 'plots', 'calibrations')\n",
    "makedirs(plot_dir, exist_ok=True)\n",
    "\n",
    "files = [f for f in listdir(data_dir) if 'spectrum' in f]\n",
    "\n",
    "x = ResultContainer()\n",
    "y = ResultContainer()\n",
    "z = ResultContainer()\n",
    "results = {'x': x, 'y': y, 'z': z}\n",
    "\n",
    "for filename in files:\n",
    "    data_file = path.join(data_dir, filename)\n",
    "    data = read_csv(data_file, delimiter='\\t',\n",
    "                    usecols=(1, 2, 3), skiprows=1, header=None)\n",
    "    data = data.values\n",
    "    signals = {'x': data[:, 0]/data[:, 2],\n",
    "                'y': data[:, 1]/data[:, 2],\n",
    "                'z': data[:, 2]}\n",
    "\n",
    "    for axis, signal in signals.items():\n",
    "        calibration = calibrate(signal, Fs, filename, plot_dir, axis=axis)\n",
    "        results[axis].k.append(calibration[0])\n",
    "        results[axis].k_err.append(calibration[1])\n",
    "        results[axis].b.append(calibration[2])\n",
    "        results[axis].b_err.append(calibration[3])\n",
    "        results[axis].K.append(\n",
    "            k_brown(signal, calibration[2], axis, filename))\n",
    "\n",
    "save_calibration_file(x, y, z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
