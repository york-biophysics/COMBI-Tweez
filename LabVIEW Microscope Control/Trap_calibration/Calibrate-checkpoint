{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[WinError 3] The system cannot find the path specified: 'Google Drive (shg512@york.ac.uk)\\\\Code\\\\python\\\\Research\\\\Trap calibration'\n",
      "C:\\Users\\Seb\\Google Drive (shg512@york.ac.uk)\\Code\\python\\Research\\Trap calibration\n"
     ]
    }
   ],
   "source": [
    "cd Google Drive (shg512@york.ac.uk)\\Code\\python\\Research\\Trap calibration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "from os import getcwd, listdir, makedirs, path\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "from lmfit import Minimizer, Parameters\n",
    "from numpy.fft import rfft, rfftfreq\n",
    "from pandas import read_csv\n",
    "from scipy.signal import periodogram\n",
    "from brownian import k_brown\n",
    "from functions import anti_aliased_lorentzian, lorentzian\n",
    "from settings import D, Fs, axl_correction, gamma, lat_correction\n",
    "\n",
    "sns.set(color_codes=True)\n",
    "use_moving_average = False\n",
    "anti_aliasing = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [],
   "source": [
    "def moving_average(data, window=10):\n",
    "    extended_data = np.hstack([[data[0]] * (window - 1), data])\n",
    "    weightings = np.repeat(1.0, window) / window\n",
    "    return np.convolve(extended_data, weightings)[window-1:-(window-1)]\n",
    "\n",
    "def calibrate(x, Fs, filename, plot_dir, cutoffs=None, antialiasing=None,\n",
    "              axis='z'):\n",
    "    plt.clf()\n",
    "    plt.xscale('log')\n",
    "    plt.yscale('log')\n",
    "    # Calculate the 1D Fourier Transform\n",
    "    # BUT THIS is just the +ve part of the two-sided\n",
    "    # f, p = rfftfreq(x.size, d=1./Fs), np.absolute(rfft(x))**2\n",
    "    f, p = periodogram(x, fs=Fs, return_onesided=True, scaling='density')\n",
    "    plt.scatter(f, p, s=1)\n",
    "\n",
    "    # Cutoff low frequencies\n",
    "    if not cutoffs:\n",
    "        cutoffs = [150, 10000]  # Nyquist limit\n",
    "    cutoff_condition = (f > cutoffs[0]) & (f < cutoffs[1])\n",
    "    p = p[cutoff_condition]\n",
    "    f = f[cutoff_condition]\n",
    "\n",
    "    # Set initial parameters for fitting\n",
    "    fc = 1000 if axis != \"z\" else 100\n",
    "    A = 1e3  # if axis != \"z\" else 500\n",
    "\n",
    "    # if axis == \"z\":\n",
    "    #     p, f = moving_average(p), moving_average(f)\n",
    "    #     plt.plot(f, p, c='g')\n",
    "\n",
    "    params = Parameters()\n",
    "    params.add('Dv', value=A)\n",
    "    params.add('fc', value=fc, min=-0, max=Fs/2)\n",
    "    if anti_aliasing:\n",
    "        params.add('fNyq', value=Fs/2)\n",
    "        minner = Minimizer(anti_aliased_lorentzian, params, fcn_args=(f, p))\n",
    "    else:\n",
    "        minner = Minimizer(lorentzian, params, fcn_args=(f, p))\n",
    "    result = minner.minimize()\n",
    "    p_fit = p + result.residual\n",
    "\n",
    "    plt.plot(f, p_fit, c='maroon')\n",
    "\n",
    "    Dv, fc = result.params['Dv'].value, result.params['fc'].value\n",
    "    Dv_err, fc_err = result.params['Dv'].stderr, result.params['fc'].stderr\n",
    "    b = np.sqrt(D/Dv)  # in m/V\n",
    "    # Taking derivative to get error (df^2 = (df/dx dx)^2 + ...)\n",
    "    if Dv_err:\n",
    "        bErr = np.sqrt(D / (4 * Dv**3)) * Dv_err\n",
    "    else:\n",
    "        bErr = 0\n",
    "    # k = 2πγfc\n",
    "    k = 2*np.pi*gamma*fc*1e6  # in pN/μm\n",
    "    if fc_err:\n",
    "        kErr = 2*np.pi*gamma*fc_err*1e6  # in pN/μm\n",
    "    else:\n",
    "        kErr = 0\n",
    "\n",
    "    b, bErr = b * 1e6, bErr * 1e6  # in μm/V\n",
    "    h_correction = axl_correction if axis == 'z'else lat_correction\n",
    "    k, kErr = k/h_correction, kErr/h_correction\n",
    "\n",
    "    plt.xlabel('f (Hz)')\n",
    "    plt.ylabel('P.S.D. (V²/Hz)')\n",
    "    plt.xlim(left=10, right=1.1*cutoffs[1])\n",
    "    plt.ylim(bottom=0.9*min(p), top=1.1*max(p))\n",
    "    plt.suptitle(f'k={k:4.2f} pN/μm, b= {b:4.2f} μm/V')\n",
    "    save_file = path.join(getcwd(), 'plots')\n",
    "    makedirs(save_file, exist_ok=True)\n",
    "    # switch back to path.basename etc later\n",
    "    save_file = path.join(plot_dir, path.splitext(filename)[0] + f'_{axis}')\n",
    "    plt.savefig(save_file, bbox_inches='tight')\n",
    "    # Plot and save result to file\n",
    "    # plt.loglog(f, lorentzian(f, *popt))\n",
    "\n",
    "    return k, kErr, b, bErr\n",
    "\n",
    "def giveResult(data):\n",
    "    string = str(np.average(data))[0:5] + ' +/- ' + \\\n",
    "             str(np.std(data)/np.sqrt(len(data)))[0:5]\n",
    "    print(string)\n",
    "    \n",
    "def save_calibration_file(x, y, z):\n",
    "    from settings import r, h, Fs\n",
    "    global anti_aliasing\n",
    "    data = {\n",
    "        'k': {\n",
    "            'x': np.average(x.k),\n",
    "            'y': np.average(y.k),\n",
    "            'z': np.average(z.k),\n",
    "            'x_error': np.std(x.k),\n",
    "            'y_error': np.std(y.k),\n",
    "            'z_error': np.std(z.k),\n",
    "            #'x_error_fit': np.average(x.k_err[x.k_err != 0]),\n",
    "            #'y_error_fit': np.average(y.k_err[y.k_err != 0]),\n",
    "            #'z_error_fit': np.average(z.k_err[z.k_err != 0]),\n",
    "            },\n",
    "        'b': {\n",
    "            'x': np.average(x.b),\n",
    "            'y': np.average(y.b),\n",
    "            'z': np.average(z.b),\n",
    "            'x_error': np.std(x.b),\n",
    "            'y_error': np.std(y.b),\n",
    "            'z_error': np.std(z.b),\n",
    "            #'x_error_fit': np.average(x.b_err[x.b_err != 0]),\n",
    "            #'y_error_fit': np.average(y.b_err[y.b_err != 0]),\n",
    "            #'z_error_fit': np.average(z.b_err[z.b_err != 0])\n",
    "            },\n",
    "        'K': {\n",
    "            'x': np.average(x.K),\n",
    "            'y': np.average(y.K),\n",
    "            'z': np.average(z.K),\n",
    "            'x_error': np.std(x.K),\n",
    "            'y_error': np.std(y.K),\n",
    "            'z_error': np.std(z.K)\n",
    "            },\n",
    "        'settings': {\n",
    "            'anti-aliasing': anti_aliasing,\n",
    "            'bead radius': r,\n",
    "            'bead height': h,\n",
    "            'Fs': Fs\n",
    "            }\n",
    "    }\n",
    "\n",
    "    with open('calibration.json', 'w') as f:\n",
    "        json.dump(data, f, indent=4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "class ResultContainer():\n",
    "    def __init__(self):\n",
    "        self.k = []\n",
    "        self.k_err = []\n",
    "        self.b = []\n",
    "        self.b_err = []\n",
    "        self.K = []\n",
    "        self.K_err = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data_dir = path.join(getcwd(), 'data')\n",
    "plot_dir = path.join(getcwd(), 'plots', 'calibrations')\n",
    "makedirs(plot_dir, exist_ok=True)\n",
    "\n",
    "files = [f for f in listdir(data_dir) if 'spectrum' in f]\n",
    "\n",
    "x = ResultContainer()\n",
    "y = ResultContainer()\n",
    "z = ResultContainer()\n",
    "results = {'x': x, 'y': y, 'z': z}\n",
    "\n",
    "for filename in files:\n",
    "    data_file = path.join(data_dir, filename)\n",
    "    data = read_csv(data_file, delimiter='\\t',\n",
    "                    usecols=(1, 2, 3), skiprows=1, header=None)\n",
    "    data = data.values\n",
    "    signals = {'x': data[:, 0]/data[:, 2],\n",
    "                'y': data[:, 1]/data[:, 2],\n",
    "                'z': data[:, 2]}\n",
    "\n",
    "    for axis, signal in signals.items():\n",
    "        calibration = calibrate(signal, Fs, filename, plot_dir, axis=axis)\n",
    "        results[axis].k.append(calibration[0])\n",
    "        results[axis].k_err.append(calibration[1])\n",
    "        results[axis].b.append(calibration[2])\n",
    "        results[axis].b_err.append(calibration[3])\n",
    "        results[axis].K.append(\n",
    "            k_brown(signal, calibration[2], axis, filename))\n",
    "\n",
    "save_calibration_file(x, y, z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
